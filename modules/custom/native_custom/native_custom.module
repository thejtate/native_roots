<?php
/**
 * @file
 * Custom site functionality
 */


module_load_include('inc', 'native_custom', 'includes/native_custom.form');
define('NATIVE_TOPICAL_TID', 21);
define('NATIVE_EDIBLES_TID', 20);
define('NATIVE_FLOWER_TID', 18);
define('NATIVE_CUSTOM_CANNABIS_CONTENT_TYPE_TITLE_LENGTH', 26);
define('NATIVE_CUSTOM_CANNABIS_CATEGORY_EDIBLES_TID', 20);
define('NATIVE_CUSTOM_CANNABIS_CATEGORY_FORM_FIELD_SIZE', 15);
define('NATIVE_CUSTOM_WEBFORM_SUPPORT_NEW_LOCATION', 1521);

/**
 * Implements hook_menu().
 */
function native_custom_menu() {
  $items['admin/native/config'] = array(
    'title' => 'Native Configuration',
    'description' => 'Native Configuration page',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('native_custom_site_setings_form'),
    'access arguments' => array('administer content site configuration'),
  );

  $items['node/%native_custom_location_node/edit_location'] = array(
    'title' => 'Edit Location',
    'page callback' => 'native_custom_location_edit',
    'page arguments' => array(1),
    'access callback' => 'node_access',
    'access arguments' => array('update', 1),
    'weight' => 0,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file path' => drupal_get_path('module', 'node'),
    'file' => 'node.pages.inc',
  );

  $items['site-download/%file'] = array(
    'access arguments' => array(1),
    'access callback' => 'native_custom_download_file_access',
    'page arguments' => array(1),
    'page callback' => 'native_custom_download_file',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function native_custom_permission() {
  return array(
    'administer content site configuration' => array(
      'title' => t('Administer main content variables'),
    ),
    'view shopify link' => array(
      'title' => t('View shopify link'),
      'description' => t('View Shopify link in admin menu.'),
    ),
  );
}

/**
 * Implements hook_preprocess_page().
 */
function native_custom_preprocess_page(&$vars) {
  drupal_add_css(drupal_get_path('module', 'native_custom') . '/css/native_custom.css');
  $locations_url = variable_get('locations', '');

  if($locations_url) {
    $vars['locations_link'] = l('', $locations_url, array('attributes' => array('class' => array('btn-location'))));
  }
}

/**
 * Implements hook_admin_menu_output_alter().
 */
function native_custom_admin_menu_output_alter(&$content) {
  if (!user_access('menu access admin index item')) {
    unset($content['menu']['admin/help']);
  }
  if (!user_access('view shopify link') && isset($content['menu']['https://funnelnr.myshopify.com/admin'])) {
    unset($content['menu']['https://funnelnr.myshopify.com/admin']);
  }
}

/**
 * Implements hook_ckeditor_plugin().
 */
function native_custom_ckeditor_plugin() {
  return array(
    'embedbase' => array(
      'name' => 'embedbase',
      'desc' => t('CKEditor embedbase - embed plugin dependency'),
      'path' => drupal_get_path('module', 'native_custom') . '/plugins/embedbase/'
    ),
    'widget' => array(
      'name' => 'widget',
      'desc' => t('CKEditor widget - embed plugin dependency'),
      'path' => drupal_get_path('module', 'native_custom') . '/plugins/widget/'
    ),
    'notificationaggregator' => array(
      'name' => 'notificationaggregator',
      'desc' => t('CKEditor notificationaggregator - embed plugin dependency'),
      'path' => drupal_get_path('module', 'native_custom') . '/plugins/notificationaggregator/'
    ),
    'notification' => array(
      'name' => 'notification',
      'desc' => t('CKEditor notification - embed plugin dependency'),
      'path' => drupal_get_path('module', 'native_custom') . '/plugins/notification/'
    ),
    'lineutils' => array(
      'name' => 'lineutils',
      'desc' => t('CKEditor lineutils - embed plugin dependency'),
      'path' => drupal_get_path('module', 'native_custom') . '/plugins/lineutils/'
    ),
    'embed' => array(
      'name' => 'embed',
      'desc' => t('Plugin for inserting embed widgets.'),
      'path' => drupal_get_path('module', 'native_custom') . '/plugins/embed/',
      'load' => TRUE,
      'buttons' => array(
        'embed' => array(
          'label' => 'Embed',
          'icon' => 'icons/embed.png',
        ),
      ),
    ),
  );
}

/**
 * Implements hook_entity_info_alter().
 */
function native_custom_entity_info_alter(&$entity_info) {
  $entity_info['node']['view modes']['news_landing'] = array(
    'label' => t('News Landing'),
    'custom settings' => TRUE,
  );
  $entity_info['node']['view modes']['cannabis_homepage_featured'] = array(
    'label' => t('Cannabis homepage featured'),
    'custom settings' => TRUE,
  );
  $entity_info['node']['view modes']['budtender_side_by_side'] = array(
    'label' => t('Budtender side by side'),
    'custom settings' => TRUE,
  );
}

/**
 * Get id of host entity from entityreference field.
 * @param attached node nid.
 * @return mixed nid or FALSE.
 */
function native_custom_get_location_menu_host_entity_id($nid) {
  $query = db_select('node', 'n');
  $query->leftJoin('field_data_field_loc_recreational_menu', 'r', 'r.entity_id = n.nid');
  $query->leftJoin('field_data_field_loc_medical_menu', 'm', 'm.entity_id = n.nid');

  $or = db_or();
  $or->condition('m.field_loc_medical_menu_target_id', $nid);
  $or->condition('r.field_loc_recreational_menu_target_id', $nid);

  $query->condition($or);

  $query->addField('n', 'nid');

  return $result = $query->execute()->fetchField();
}

/**
 * Implements hook_menu_local_tasks_alter().
 */
function native_custom_menu_local_tasks_alter(
  &$data,
  $router_item,
  $root_path
) {

  //Rename location_menu local task "Edit" tab
  if (
    !empty($router_item['page_arguments'][0]->type)
    && ($router_item['page_arguments'][0]->type == 'location_menu')
    && !empty($data['tabs'][0]['output'])
  ) {

    foreach ($data['tabs'][0]['output'] as $key => $tab) {
      if (!empty($tab['#link']['path']) && $tab['#link']['path'] == 'node/%/edit') {
        $data['tabs'][0]['output'][$key]['#link']['title'] = t('Edit Location "Menu"');
      }
    }

  }

}

/**
 * Find and load location that have location menu nid in entity reference
 */
function native_custom_location_node_load($location_menu_nid) {
  $host_location_nid = native_custom_get_location_menu_host_entity_id($location_menu_nid);

  $host_location = $host_location_nid ? node_load($host_location_nid) : FALSE;
  if (!empty($host_location)) {
    $host_location->location_menu_back_nid = $location_menu_nid;
  }

  return $host_location;
}

/**
 * Page callback for location edit.
 */
function native_custom_location_edit($location_node) {
  drupal_goto('node/' . $location_node->nid . '/edit', array('query' => array('destination' => 'node/' . $location_node->location_menu_back_nid)));
  drupal_exit();
}

/**
 * Implements hook_preprocess_node().
 */
function native_custom_preprocess_node(&$vars) {

  $node = $vars['node'];
  switch ($node->type) {
    case 'location':

      module_load_include('inc', 'native_custom', 'includes/native_custom.helpers');

      $results = native_custom_views_retrieve('locations_map_sources', 'attachment_2');
      $options = array('none' => t('Select Another Location'));

      foreach ($results as $row) {
        if(!empty($row->nid) && !empty($row->{'select title'})) {
          $url = url('node/' . $row->nid);
          $options[$url] = $row->{'select title'};
        }
      }

      $vars['location_select'] = array(
        '#type' => 'select',
        '#title' => '',
        '#options' => $options,
      );

      break;
    case 'location_menu':

      module_load_include('inc', 'native_custom', 'includes/native_custom.helpers');

      $results = native_custom_views_retrieve('locations_menus_sources', 'attachment');
      $options = array('none' => t('Select Another Location'));

      foreach ($results as $row) {
        if(!empty($row->{'select title'})) {
          $url = !empty($row->medical_nid) && !empty($row->medical_published)
            ? url('node/' . $row->medical_nid)
            : '';

          if(empty($url)) {
            $url = !empty($row->recreational_nid) && !empty($row->recreational_published)
              ? url('node/' . $row->recreational_nid)
              : '';
          }

          if(!empty($url)) {
            $options[$url] = $row->{'select title'};
          }
        }
      }

      $vars['location_select'] = array(
        '#type' => 'select',
        '#title' => '',
        '#options' => $options,
      );
      break;
  }
}

/**
 * Implements hook_form_views_exposed_form_alter().
 */
function native_custom_form_views_exposed_form_alter(&$form, &$form_state) {

  if ($form['#id'] == 'views-exposed-form-news-block') {
    $form['field_news_date_value']['value']['#date_format'] = 'm';
    $form['#validate'][] = 'native_custom_news_form_views_exposed_form_validate';
  }
}

/**
 * Validation function for news date exposed filters.
 *
 * @param $form
 * @param $form_state
 */
function native_custom_news_form_views_exposed_form_validate(&$form, &$form_state) {
  $selected_year = isset($form_state['input']['date_filter']['value']['year']) ?
    $form_state['input']['date_filter']['value']['year'] : '';
  $selected_month = isset($form_state['input']['field_news_date_value']['value']['month']) ?
    $form_state['input']['field_news_date_value']['value']['month'] : '';

  $handlers = &$form_state['view']->filter;
  foreach ($handlers as $key => $handler) {
    if (!empty($handler->options['exposed'])
      && isset($form[$key]['value']['#type'])
      && $form[$key]['value']['#type'] == 'date_select'
      && $form[$key]['value']['#date_format'] == 'm'
    ) {
      $handler->options['granularity'] = 'month';
      $handler->format = 'm';
    }
  }

  $default_year = isset($form['date_filter']['value']['year']['#options']['']) ?
    $form['date_filter']['value']['year']['#options'][''] : t('-Year');
  $default_month = isset($form['field_news_date_value']['value']['month']['#options']['']) ?
    $form['field_news_date_value']['value']['month']['#options'][''] : t('-Month');

  $result_default = _native_custom_get_years_and_months();
  if ($result_default && is_array($result_default)) {
    $result_default = _native_custom_normalize($result_default, $default_year, $default_month);
    $form['date_filter']['value']['year']['#options'] = $result_default['year'];
    $form['field_news_date_value']['value']['month']['#options'] = $result_default['month'];
  }

  if (!empty($selected_year)) {
    $result_month = _native_custom_get_month_by_year($selected_year);
    if ($result_month && is_array($result_month)) {
      $result = _native_custom_normalize($result_month, $default_year, $default_month);
      $form['field_news_date_value']['value']['month']['#options'] = $result['month'];
    }
  }

  $has_news = _native_custom_check_result($selected_year, $selected_month);
  if (!$has_news) {
    $form_state['input']['field_news_date_value']['value']['month'] = '';
    $form_state['values']['field_news_date_value']['value'] = '';
  }
}

/**
 * Get default date select options.
 *
 * @return mixed
 */
function _native_custom_get_years_and_months() {

  $query = db_select('field_data_field_news_date', 'fdfnd')
    ->fields('fdfnd', array('field_news_date_value'));
  $query->leftJoin('node', 'n', 'n.nid = fdfnd.entity_id');
  $result = $query->condition('n.type', 'news')
    ->condition('n.status', 1)
    ->execute()
    ->fetchCol();

  return $result;
}

/**
 * Get list of month for selected year.
 *
 * @param $selected_year
 * @return mixed
 */
function _native_custom_get_month_by_year($selected_year) {
  $query = db_select('field_data_field_news_date', 'fdfnd')
    ->fields('fdfnd', array('field_news_date_value'));
  $query->leftJoin('node', 'n', 'n.nid = fdfnd.entity_id');
  $query->condition('n.type', 'news')
    ->condition('n.status', 1);
  $query->where('YEAR(fdfnd.field_news_date_value) = :year', array(':year' => $selected_year));
  $result = $query->execute()
    ->fetchCol();

  return $result;
}

/**
 * Get list of years for selected month.
 *
 * @param $selected_month
 * @return mixed
 */
function _native_custom_get_year_by_month($selected_month) {
  $query = db_select('field_data_field_news_date', 'fdfnd')
    ->fields('fdfnd', array('field_news_date_value'));
  $query->leftJoin('node', 'n', 'n.nid = fdfnd.entity_id');
  $query->condition('n.type', 'news')
    ->condition('n.status', 1);
  $query->where('MONTH(fdfnd.field_news_date_value) = :month', array(':month' => $selected_month));
  $result = $query->execute()
    ->fetchCol();

  return $result;
}

/**
 * Get list of years for selected month.
 *
 * @param $selected_month
 * @return mixed
 */
function _native_custom_check_result($selected_year, $selected_month) {
  $query = db_select('field_data_field_news_date', 'fdfnd')
    ->fields('fdfnd', array('field_news_date_value'));
  $query->leftJoin('node', 'n', 'n.nid = fdfnd.entity_id');
  $query->condition('n.type', 'news')
    ->condition('n.status', 1);
  if ($selected_year) {
    $query->where('YEAR(fdfnd.field_news_date_value) = :year', array(':year' => $selected_year));
  }
  if ($selected_month) {
    $query->where('MONTH(fdfnd.field_news_date_value) = :month', array(':month' => $selected_month));
  }

  $result = $query->execute()
    ->fetchCol();

  return $result;
}

/**
 * Normalize year and month list.
 *
 * @param $result
 * @param $default_year
 * @param $default_month
 * @return array
 */
function _native_custom_normalize($result, $default_year, $default_month) {
  $list = array(
    'year' => array('' => $default_year,),
    'month' => array('' => $default_month,)
  );
  foreach ($result as $date) {
    $date_timestamp = strtotime($date);
    $year = date('Y', $date_timestamp);
    $month = date('F', $date_timestamp);
    $month_number = date('n', $date_timestamp);
    $list['year'][$year] = $year;
    $list['month'][$month_number] = $month;
  }
  ksort($list['year']);
  ksort($list['month']);
  return $list;
}

function native_custom_form_alter(&$form, $form_state, $form_id) {
  $form_id = isset($form['#id']) ? $form['#id'] : '';
  switch ($form_id) {
    case 'cannabis-node-form':
      if (isset($form['title']['#maxlength'])) {
        $form['title']['#maxlength'] = NATIVE_CUSTOM_CANNABIS_CONTENT_TYPE_TITLE_LENGTH;
      }
      $category_select = (isset($form['field_cannabis_category'][LANGUAGE_NONE]['#type']) &&
        ($form['field_cannabis_category'][LANGUAGE_NONE]['#type'] == 'select')) ? TRUE : FALSE;
      if ($category_select) {
        $form['field_cannabis_category'][LANGUAGE_NONE]['#size'] = NATIVE_CUSTOM_CANNABIS_CATEGORY_FORM_FIELD_SIZE;
      }
      break;
    case 'news-node-form':
      if (isset($form['field_rewards_right_image'])) {
        $form['field_rewards_right_image']['#access'] = FALSE;
      }
      break;
    case 'webform-client-form-' . NATIVE_CUSTOM_WEBFORM_SUPPORT_NEW_LOCATION:
      $form['#validate'][] = 'native_custom_support_new_location_form_validate';
      break;
  }
}

/**
 * Implements hook_js_alter().
 *
 * @param $js
 */
function native_custom_js_alter(&$js) {

  foreach ($js as $key => $item) {
    if(strpos($key, 'select2widget/js/select2widget.js') !== FALSE) {

      $js[$key]['weight'] = 2;
    }
  }
}

/**
 * Page callback for file downloading.
 */
function native_custom_download_file($file) {
  $headers = file_download_headers($file->uri);
//  $headers['Content-Type'] = mime_header_encode($file->filemime);
//  $headers['Content-Disposition'] = 'attachment;filename=' . $file->filename;

  $without_ext = preg_replace('/\\.[^.\\s]{3,4}$/', '', $file->filename);
  $ext = pathinfo($file->filename, PATHINFO_EXTENSION);
  $filename = $without_ext . '.' . strtoupper($ext);
  $headers['Content-Type'] = mime_header_encode($file->filemime);
  $headers['Content-Disposition'] = 'attachment; filename=' . $filename;

  // detect Mobile Safari
  $useragent = isset($_SERVER['HTTP_USER_AGENT']) ? $_SERVER['HTTP_USER_AGENT'] : '';
  if (strstr($useragent, " AppleWebKit/") && strstr($useragent, " Mobile/")) {
    $headers['Content-Type'] = 'application/octet-stream';
    unset($headers['Content-Length']);
  }

  return file_transfer($file->uri, $headers);
}

/**
 * Access callback for file downloading.
 */
function native_custom_download_file_access($file) {
  $access = FALSE;
  if ($file && file_exists($file->uri)) {
    $access = TRUE;
  }
  return $access;
}

/**
 * Check mobile.
 *
 * @return bool
 */
function _native_custom_check_mobile() {
  if (!isset($_SERVER['HTTP_USER_AGENT'])) {
    $is_mobile = FALSE;
  }
  else {
    $useragent = $_SERVER['HTTP_USER_AGENT'];
    $is_mobile = (preg_match('/(android|bb\d+|meego).+mobile|avantgo|bada\/|
    blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|
    kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?
    |phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)
    |vodafone|wap|windows ce|xda|xiino/i',$useragent) || preg_match('/1207|6310|6590|
    3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|
    amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|
    bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|
    cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|
    ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|
    g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|
    hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|
    i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|
    jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|
    50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|
    me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|
    mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|
    tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|
    pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|
    qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|
    sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|
    shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|
    sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|
    to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|
    vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|
    webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i', substr($useragent, 0, 4))) ? TRUE : FALSE;
  }
  return $is_mobile;
}

function native_custom_canabis_meta_description_map() {
  return array(
    NATIVE_FLOWER_TID => array(
      'title' => 'Buy [node:title] Strain in Colorado | [site:name]',
      'description' => 'Looking for where to order & smoke [node:title]? Get the best strain information & review from Native Roots Dispensary.'
    ),
    NATIVE_EDIBLES_TID => array(
      'title' => 'Order [node:title] Marijuana Edible in Colorado',
      'description' => 'Looking for the best [node:title] edibles? Visit Native Roots Dispensary for the best recreational and medical marijuana.'
    ),
    NATIVE_TOPICAL_TID => array(
      'title' => 'Topical Marijuana [node:title]',
      'description' => 'Get the best [node:title] topical marijuana products in Colorado from Native Roots Dispensary.'
    ),
  );
}

/**
 * Implements hook_metatag_presave().
 */
function native_custom_metatag_presave(&$metatags, $entity_type, $entity_id, $revision_id, $lang_code) {

  //Alter title meta for cannabis node, according to category.

  if($entity_type == 'node') {

    $entities = entity_load($entity_type, array($entity_id), array(), TRUE);
    $entity = reset($entities);

    $meta_map = native_custom_canabis_meta_description_map();
    if(!empty($entity) && $entity->type == 'cannabis') {

      foreach ($meta_map as $tid => $category_tags) {

        if(!empty($entity->field_cannabis_category[$lang_code])) {
          $has_tag = array_filter($entity->field_cannabis_category[$lang_code], function($v) use ($tid) { return $v['tid'] == $tid;});
          if($has_tag) {

            if(empty($metatags['title']['value'])) {
              $metatags['title']['value'] = $category_tags['title'];
            }
            if(empty($metatags['description']['value'])) {
              $metatags['description']['value'] = $category_tags['description'];
            }
            break;//go out from foreach
          }
        }
      }

    }
  }

}

/**
 * Change text field size.
 */
function native_custom_change_text_field_max_length($field_name, $new_length) {
  $field_table = 'field_data_' . $field_name;
  $field_revision_table = 'field_revision_' . $field_name;
  $field_column = $field_name . '_value';

  // Alter value field length in fields table
  db_query("ALTER TABLE `{$field_table}` CHANGE `{$field_column}` `{$field_column}` VARCHAR( {$new_length} )");
  // Alter value field length in fields revision table
  db_query("ALTER TABLE `{$field_revision_table}` CHANGE `{$field_column}` `{$field_column}` VARCHAR( {$new_length} )");

  // Update field config with new max length
  $result = db_query("SELECT CAST(`data` AS CHAR(10000) CHARACTER SET utf8) FROM `field_config` WHERE field_name = '{$field_name}'");
  $config = $result->fetchField();
  $config_array = unserialize($config);
  $config_array['settings']['max_length'] = $new_length;
  $config = serialize($config_array);
  db_update('field_config')
    ->fields(array('data' => $config))
    ->condition('field_name', $field_name)
    ->execute();
}

/**
 * Implements template_preprocess_field().
 */
function native_custom_preprocess_field(&$variables) {
  $element = $variables['element'];
  $field_name = $element['#field_name'];

  // Address field module integration.
  if ($element['#field_type'] == 'addressfield' && $element['#formatter'] == 'addressfield_default' && $field_name == 'field_loc_address') {
    $element = $variables['element'];

    foreach ($element['#items'] as $delta => $item) {
      // Inject property RDFa attribute on each element of the address field
      // formatter output.
      _native_custom_addressfield_add_attributes($variables['items'][$delta], $element['#items'][$delta]);
    }
  }

}

/**
 * Helper function to recursively inject RDFa attributes in an address item.
 */
function _native_custom_addressfield_add_attributes(&$address, $values) {
  // Define schema.org mappings which will be injected in the addressfield
  // formatter output.
  static $mappings = array(
    'thoroughfare' => 'streetAddress',
    'postal_code' => 'postalCode',
    'locality' => 'addressLocality',
    'administrative_area' => 'addressRegion',
    'country' => 'addressCountry',
  );

  foreach (element_children($address) as $key) {
    $child = &$address[$key];
    // Automatically add RDFa property attribute to each address element.
    if (in_array($key, array_keys($mappings), TRUE)) {
      $child['#attributes']['itemprop'][] = $mappings[$key];
      // Use ISO country code as country value.
      if ($key == 'country' && $values['country']) {
        $child['#attributes']['content'] = $values['country'];
      }
    }

    // Recurse through the child.
    _native_custom_addressfield_add_attributes($child, $values);
  }
}


function native_custom_preprocess_html(&$vars) {

  $organization_value = array(
    '@context' => 'http://schema.org',
    '@type'=> 'Organization',
    'name' => 'Native Roots Dispensary',
    'url' => preg_replace('/\/$/', '', url('<front>', array('absolute' => TRUE))),//url without trailing slash
    'contactPoint' => array(
      array(
        "@type"=> "ContactPoint",
        "telephone" => variable_get('phone', ''),
        "contactType" => "Customer service"
      ),
    ),
    'logo' => url(base_path() . 'google-url-logo.png', array('absolute' => TRUE)),
  );

  $same_as = array();
  foreach (array('facebook', 'twitter', 'youtube'/*, 'instagram', 'leafly'*/) as $name) {
    $value = variable_get($name, '');
    if(!empty($value)) {
      $same_as[] = $value;
    }
  }

  if(!empty($same_as)) {
    $organization_value['sameAs'] = $same_as;
  }

  $organization_markup = array(
    '#type' => 'html_tag',
    '#tag' => 'script',
    '#attributes' => array(
      'type' => 'application/ld+json',
    ),
    '#value' => json_encode($organization_value, JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES),
    '#weight' => '-99',
  );

  drupal_add_html_head($organization_markup, 'organization_markup');
}

/**
 * Draggableviews handler native alter.
 * Draggableviews with pager.
 *
 * @param $arguments
 * @param $view
 * @param $draggableviews
 */
function native_custom_draggableviews_handler_native_arguments_alter($arguments, $view, &$draggableviews) {

  $view_name = isset($view->name) ? $view->name : '';
  $view_display = isset($view->current_display) ? $view->current_display : '';

  switch ($view_name) {
    case 'manage_treehouse_2016_photos':
      $total_items = isset($view->query->pager->total_items) ? $view->query->pager->total_items : 0;
      if (($view_display == 'page') && (count($draggableviews) < $total_items)) {

        $weight = 0;

        $page_number = isset($view->query->pager->current_page) ?
          $view->query->pager->current_page : 0;
        $items_per_page = isset($view->query->pager->options['items_per_page']) ?
          $view->query->pager->options['items_per_page'] : 0;

        $weight = $page_number * $items_per_page;
        // Save records to our custom table.
        $args_string = json_encode($arguments);

        // Reorder the items by weight.
        uasort($draggableviews, 'drupal_sort_weight');

        foreach ($draggableviews as $item) {
          // Make sure id is available.
          if (!isset($item['id'])) {
            continue;
          }
          // Delete previous order record.
          db_delete('draggableviews_structure')
            ->condition('view_name', $view_name)
            ->condition('view_display', $view_display)
            ->condition('args', $args_string)
            ->condition('entity_id', $item['id'])
            ->execute();

          // Create new order record.
          $record = array(
            'view_name' => $view_name,
            'view_display' => $view_display,
            'args' => $args_string,
            'entity_id' => $item['id'],
            'weight' => $weight,
          );
          // If parent element exists, save it.
          if (isset($item['parent'])) {
            $record['parent'] = $item['parent'];
          }
          drupal_write_record('draggableviews_structure', $record);
          $weight++;
        }

        $draggableviews = array();
      }
      break;
  }

}

/**
 * Implements hook_node_presave().
 */
function native_custom_node_presave($node) {
  $node_type = isset($node->type) ? $node->type : '';

  switch ($node_type) {
    case 'gallery_type_2':
      $fid = isset($node->field_gt2_image[LANGUAGE_NONE][0]['fid']) ?
        $node->field_gt2_image[LANGUAGE_NONE][0]['fid'] : '';
      if ($fid) {
        $file = file_load($fid);
        $image_uri = isset($file->uri) ? $file->uri : '';
        $thumbnail_style = 'gallery_type_2__image';
        _native_custom_create_image_file_with_style($image_uri, $thumbnail_style);
      }
      break;
  }
}


/**
 * Create image file with style.
 *
 * @param $image_uri
 * @param $style
 * @return bool|string|void
 */
function _native_custom_create_image_file_with_style($image_uri, $style) {
  $styled_path = image_style_path($style, $image_uri);
  if (!file_exists($styled_path)) {
    $style = image_style_load($style);
    image_style_create_derivative($style, $image_uri, $styled_path);
  }

  return $styled_path;
}

/**
 * Validate support new location form.
 * Disable error messages.
 * @param $form
 * @param $form_state
 */
function native_custom_support_new_location_form_validate($form, &$form_state) {
  $error_messages = drupal_get_messages();
}