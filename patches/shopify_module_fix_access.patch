Index: trunk/sites/all/modules/contrib/shopify/shopify.module
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?php\n/**\n * @file\n * Main module file containing hooks and functions.\n */\n\n// Load include files.\nmodule_load_include('inc', 'shopify', 'includes/shopify.api');\nmodule_load_include('inc', 'shopify', 'includes/shopify.webhooks');\nmodule_load_include('inc', 'shopify', 'includes/shopify.search');\nmodule_load_include('inc', 'shopify', 'includes/shopify.metatag');\nmodule_load_include('inc', 'shopify', 'includes/shopify.path');\nmodule_load_include('inc', 'shopify', 'includes/shopify.rules');\n\n/**\n * Implements hook_taxonomy_term_view().\n */\nfunction shopify_taxonomy_term_view($term, $view_mode, $langcode) {\n  if ($view_mode !== 'full') {\n    return;\n  }\n  switch ($term->vocabulary_machine_name) {\n    case 'shopify_collections':\n      $uri = entity_uri('taxonomy_term', $term);\n      drupal_goto($uri['path']);\n      break;\n    case 'shopify_tags':\n      $uri = entity_uri('taxonomy_term', $term);\n      drupal_goto($uri['path']);\n      break;\n  }\n}\n\n/**\n * Implements hook_views_api().\n */\nfunction shopify_views_api() {\n  return array(\n    'api' => '3.0',\n    'path' => drupal_get_path('module', 'shopify') . '/views'\n  );\n}\n\n/**\n * Implements hook_views_default_views().\n *\n * Imports views from the /views directory.\n */\nfunction shopify_views_default_views() {\n  $path = __DIR__ . '/views/*.view.inc';\n  $views = array();\n  foreach (glob($path) as $views_filename) {\n    $view = FALSE;\n    require_once($views_filename);\n    $views[$view->name] = $view; // $view exists in the included file.\n    unset($view);\n  }\n  return $views;\n}\n\n/**\n * Implements hook_permission().\n */\nfunction shopify_permission() {\n  return array(\n    'administer shopify' => array(\n      'title' => t('Administer Shopify'),\n      'description' => t('Full admin control over the Shopify store. Overrides all Shopify permissions.'),\n      'restrict access' => TRUE,\n    ),\n    'administer shopify webhooks' => array(\n      'title' => t('Administer Shopify webhooks'),\n      'description' => t('Create and remove webhooks from Shopify.'),\n      'restrict access' => TRUE,\n    ),\n    'sync shopify content' => array(\n      'title' => t('Sync Shopify content'),\n      'description' => t('Sync products and collections to the site.'),\n    ),\n    'edit shopify products' => array(\n      'title' => t('Edit Shopify products'),\n      'description' => t('Edit Shopify product fields, metadata, paths, etc.'),\n    ),\n    'view shopify products' => array(\n      'title' => t('View Shopify products'),\n      'description' => t('View Shopify products.'),\n    ),\n  );\n}\n\n/**\n * Implements hook_menu().\n */\nfunction shopify_menu() {\n\n  // Create nice shortcut links for shopify admin pages.\n  $store_url = 'https://' . shopify_store_info()->myshopify_domain;\n  $items['admin/shopify/store'] = array(\n    'title' => 'Admin',\n    'page callback' => 'drupal_goto',\n    'page arguments' => array($store_url . '/admin'),\n    'access callback' => 'shopify_user_access',\n    'access arguments' => array('administer shopify'),\n    'options' => array('attributes' => array('target' => '_blank')),\n    'weight' => -999,\n  );\n  $items['admin/shopify/store/settings'] = array(\n    'title' => 'Settings',\n    'page callback' => 'drupal_goto',\n    'page arguments' => array($store_url . '/admin/settings/general'),\n    'access callback' => 'shopify_user_access',\n    'access arguments' => array('administer shopify'),\n    'options' => array('attributes' => array('target' => '_blank')),\n  );\n  $items['admin/shopify/store/products'] = array(\n    'title' => 'Products',\n    'page callback' => 'drupal_goto',\n    'page arguments' => array($store_url . '/admin/products'),\n    'access callback' => 'shopify_user_access',\n    'access arguments' => array('administer shopify'),\n    'options' => array('attributes' => array('target' => '_blank')),\n  );\n  $items['admin/shopify/store/collections'] = array(\n    'title' => 'Collections',\n    'page callback' => 'drupal_goto',\n    'page arguments' => array($store_url . '/admin/collections'),\n    'access callback' => 'shopify_user_access',\n    'access arguments' => array('administer shopify'),\n    'options' => array('attributes' => array('target' => '_blank')),\n  );\n  $items['admin/shopify/store/gift_cards'] = array(\n    'title' => 'Gift Cards',\n    'page callback' => 'drupal_goto',\n    'page arguments' => array($store_url . '/admin/gift_cards'),\n    'access callback' => 'shopify_user_access',\n    'access arguments' => array('administer shopify'),\n    'options' => array('attributes' => array('target' => '_blank')),\n  );\n  $items['admin/shopify/store/orders'] = array(\n    'title' => 'Orders',\n    'page callback' => 'drupal_goto',\n    'page arguments' => array($store_url . '/admin/orders'),\n    'access callback' => 'shopify_user_access',\n    'access arguments' => array('administer shopify'),\n    'options' => array('attributes' => array('target' => '_blank')),\n  );\n  $items['admin/shopify/store/customers'] = array(\n    'title' => 'Customers',\n    'page callback' => 'drupal_goto',\n    'page arguments' => array($store_url . '/admin/customers'),\n    'access callback' => 'shopify_user_access',\n    'access arguments' => array('administer shopify'),\n    'options' => array('attributes' => array('target' => '_blank')),\n  );\n  $items['admin/shopify/store/reports'] = array(\n    'title' => 'Reports',\n    'page callback' => 'drupal_goto',\n    'page arguments' => array($store_url . '/admin/reports'),\n    'access callback' => 'shopify_user_access',\n    'access arguments' => array('administer shopify'),\n    'options' => array('attributes' => array('target' => '_blank')),\n  );\n  $items['admin/shopify/store/discounts'] = array(\n    'title' => 'Discounts',\n    'page callback' => 'drupal_goto',\n    'page arguments' => array($store_url . '/admin/discounts'),\n    'access callback' => 'shopify_user_access',\n    'access arguments' => array('administer shopify'),\n    'options' => array('attributes' => array('target' => '_blank')),\n  );\n  $items['admin/shopify/store/apps'] = array(\n    'title' => 'Apps',\n    'page callback' => 'drupal_goto',\n    'page arguments' => array($store_url . '/admin/apps'),\n    'access callback' => 'shopify_user_access',\n    'access arguments' => array('administer shopify'),\n    'options' => array('attributes' => array('target' => '_blank')),\n  );\n  $items['admin/shopify/store/configure'] = array(\n    'title' => 'Configure',\n    'page callback' => 'drupal_goto',\n    'page arguments' => array($store_url . '/admin/dashboard/online'),\n    'access callback' => 'shopify_user_access',\n    'access arguments' => array('administer shopify'),\n    'options' => array('attributes' => array('target' => '_blank')),\n  );\n\n  $items['product/%shopify_product'] = array(\n    'page callback' => 'entity_ui_entity_page_view',\n    'page arguments' => array(1),\n    'load arguments' => array('shopify_product'),\n    'access callback' => 'entity_access',\n    'access arguments' => array('view', 'shopify_product', 1),\n    'title callback' => 'shopify_product_title',\n    'title arguments' => array(1),\n  );\n\n  // Add \"View\" tab on Product page\n  $items['product/%shopify_product/view'] = array(\n    'title' => 'View',\n    'page callback' => 'entity_ui_entity_page_view',\n    'page arguments' => array(1),\n    'load arguments' => array('shopify_product'),\n    'access callback' => 'entity_access',\n    'access arguments' => array('view', 'shopify_product', 1),\n    'type' => MENU_DEFAULT_LOCAL_TASK,\n  );\n\n  // Add \"Edit\" tab on Product page\n  $items['product/%shopify_product/edit'] = array(\n    'page callback' => 'shopify_redirect_to_edit',\n    'page arguments' => array(1),\n    'load arguments' => array('shopify_product'),\n    'access callback' => 'entity_access',\n    'access arguments' => array('update', 'shopify_product', 1),\n    'title' => 'Edit',\n    'type' => MENU_LOCAL_TASK,\n    'weight' => 1,\n  );\n\n  // Add \"View\" tab to edit form\n  $items['admin/shopify/products/manage/%shopify_product/view'] = array(\n    'page callback' => 'shopify_redirect_to_view',\n    'page arguments' => array(4),\n    'load arguments' => array('shopify_product'),\n    'access callback' => 'entity_access',\n    'access arguments' => array('view', 'shopify_product', 4),\n    'title' => 'View',\n    'type' => MENU_LOCAL_TASK,\n    'weight' => 1,\n  );\n\n  $items['admin/shopify'] = array(\n    'page callback' => 'shopify_admin_page',\n    'title' => 'Shopify',\n    'access callback' => 'shopify_user_access',\n    'access arguments' => array('administer shopify'),\n    'file' => 'includes/shopify.admin.inc',\n  );\n\n  $items['admin/shopify/overview'] = array(\n    'title' => 'Overview',\n    'description' => 'View general information about your Shopify store.',\n    'type' => MENU_DEFAULT_LOCAL_TASK,\n    'weight' => -10,\n  );\n  $items['admin/shopify/sync'] = array(\n    'title' => 'Sync',\n    'description' => 'Sync Shopify store information to the website.',\n    'page callback' => 'drupal_get_form',\n    'page arguments' => array('shopify_admin_sync_form'),\n    'access callback' => 'shopify_user_access',\n    'access arguments' => array('sync shopify content'),\n    'type' => MENU_LOCAL_TASK,\n    'file' => 'includes/shopify.admin.inc',\n  );\n  $items['admin/shopify/sync/delete-orphaned-tags'] = array(\n    'title' => 'Delete orphaned tags',\n    'description' => 'Deletes shopify product tag taxonomy terms from the system.',\n    'page callback' => 'drupal_get_form',\n    'page arguments' => array('shopify_admin_delete_orphaned_tags_form'),\n    'access callback' => 'shopify_user_access',\n    'access arguments' => array('administer shopify'),\n    'type' => MENU_CALLBACK,\n    'file' => 'includes/shopify.admin.inc',\n  );\n  $items['admin/shopify/theme'] = array(\n    'title' => 'Theme',\n    'description' => 'Download a default Shopify Theme for your Shopify store.',\n    'page callback' => 'drupal_get_form',\n    'page arguments' => array('shopify_admin_theme_download'),\n    'access callback' => 'shopify_user_access',\n    'access arguments' => array('administer shopify'),\n    'type' => MENU_LOCAL_TASK,\n    'file' => 'includes/shopify.admin.inc',\n  );\n  $items['admin/shopify/theme/download'] = array(\n    'page callback' => 'shopify_download_theme',\n    'access callback' => 'shopify_user_access',\n    'access arguments' => array('administer shopify'),\n    'type' => MENU_CALLBACK,\n    'file' => 'includes/shopify.admin.inc',\n  );\n\n  $items['admin/shopify/webhooks'] = array(\n    'title' => 'Webhooks',\n    'description' => 'Manage Shopify Webhooks',\n    'page callback' => 'drupal_get_form',\n    'page arguments' => array('shopify_webhooks_admin'),\n    'access callback' => 'shopify_user_access',\n    'access arguments' => array('administer shopify webhooks'),\n    'type' => MENU_LOCAL_TASK,\n    'file' => 'includes/shopify.admin.inc',\n  );\n\n  $items['shopify/redirect'] = array(\n    'page callback' => 'shopify_redirect',\n    'access callback' => TRUE,\n    'type' => MENU_CALLBACK,\n  );\n\n  $items['shopify/theme/download/%/%/%'] = array(\n    'page callback' => 'shopify_theme_download',\n    'page arguments' => array(5),\n    'access callback' => 'shopify_theme_download_access',\n    'access arguments' => array(3, 4, 5),\n    'type' => MENU_CALLBACK,\n  );\n\n  $items['shopify/added-to-cart'] = array(\n    'page callback' => 'shopify_added_to_cart',\n    'access callback' => TRUE,\n    'type' => MENU_CALLBACK,\n  );\n\n  $items['shopify/webhook'] = array(\n    'page callback' => 'shopify_incoming_webhook',\n    'access callback' => 'shopify_webhook_access',\n    'type' => MENU_CALLBACK,\n  );\n\n  return $items;\n}\n\n/**\n * Gets tags from the system that are not associated with any products.\n */\nfunction shopify_get_orphaned_tags() {\n  $query = new EntityFieldQuery();\n  $result = $query->entityCondition('entity_type', 'taxonomy_term')\n    ->entityCondition('bundle', 'shopify_tags')\n    ->execute();\n  $orphaned_terms = array();\n  if ($result && isset($result['taxonomy_term']) && $result['taxonomy_term']) {\n    $terms = taxonomy_term_load_multiple(array_keys($result['taxonomy_term']));\n    // For each term, check if it has products associated with it.\n    foreach ($terms as $tid => $term) {\n      $query = new EntityFieldQuery();\n      $count = $query->entityCondition('entity_type', 'shopify_product')\n        ->fieldCondition('shopify_product_tags', 'tid', $tid)\n        ->execute();\n      if (!$count || !isset($count['shopify_product']) || !count($count['shopify_product'])) {\n        $orphaned_terms[] = $term;\n      }\n    }\n  }\n  return $orphaned_terms;\n}\n\n/**\n * Menu callback for downloading the Shopify theme .zip file.\n *\n * @param string $filename\n *   Name of the file.\n */\nfunction shopify_theme_download($filename) {\n  $filepath = file_directory_temp() . '/' . $filename;\n  // Reset any previous headers.\n  header(\"Pragma: public\");\n  header(\"Expires: 0\");\n  header(\"Cache-Control: must-revalidate, post-check=0, pre-check=0\");\n  header(\"Cache-Control: public\");\n  header(\"Content-Description: File Transfer\");\n  header(\"Content-type: application/octet-stream\");\n  header(\"Content-Disposition: attachment; filename=\\\"$filename\\\"\");\n  header(\"Content-Transfer-Encoding: binary\");\n  header(\"Content-Length: \" . filesize($filepath));\n  @readfile($filepath);\n  ob_end_flush();\n}\n\n/**\n * Menu access callback for downloading the Shopify theme .zip file.\n *\n * @param int $timestamp\n *   Unix timestamp.\n * @param string $sig\n *   Secure signature that ensures the file can only be downloaded by Shopify.\n * @param string $filename\n *   Name of the file.\n *\n * @return boolean\n *   Returns TRUE if the user can access the callback.\n */\nfunction shopify_theme_download_access($timestamp, $sig, $filename) {\n  $compare = hash_hmac('sha256', $timestamp . 'default_shopify_theme.zip', variable_get('shopify_api_secret'));\n  if ($compare !== $sig) {\n    // Someone doesn't have the right sig here.\n    return FALSE;\n  }\n  if (REQUEST_TIME > $timestamp + 500) {\n    // The link has expired.\n    return FALSE;\n  }\n  return TRUE;\n}\n\n/**\n * Implements hook_cron().\n */\nfunction shopify_cron() {\n  // Check last cron run time vs. the cron speed setting.\n  if (variable_get('cron_last') + variable_get('shopify_cron_sync_time', 0) > REQUEST_TIME) {\n    // No need to sync yet.\n    return FALSE;\n  }\n  if (variable_get('shopify_cron_sync_products')) {\n    // Sync products.\n    shopify_sync_products(array(\n      'updated_at_min' => variable_get('shopify_last_product_sync'),\n      'limit' => 250,\n    ));\n  }\n  if (variable_get('shopify_cron_sync_collections')) {\n    // Sync collections.\n    shopify_sync_collections(array(\n      'updated_at_min' => variable_get('shopify_last_collection_sync'),\n      'limit' => 250,\n    ));\n  }\n}\n\n/**\n * Sync Shopify products to the site.\n *\n * @param array $options\n *   Array of options to pass the API call.\n */\nfunction shopify_sync_products(array $options = array()) {\n  $products = shopify_api_get_products($options);\n  foreach ($products as $product) {\n    $shopify_product = shopify_product_update($product['id'], 0, $product);\n    $shopify_product->save();\n    foreach ($product['variants'] as $v) {\n      $variant = shopify_product_update($product['id'], $v['id'], $v);\n      $variant->save();\n    }\n  }\n  shopify_sync_deleted_products(array('limit' => 250));\n}\n\n/**\n * Sync Shopify collections to the site.\n *\n * @param array $options\n *   Array of options to pass the API call.\n */\nfunction shopify_sync_collections(array $options = array()) {\n  $collections = shopify_api_get_collections($options);\n  foreach ($collections as $collection) {\n    $term = shopify_collection_load($collection['id']);\n    if (!$term) {\n      // Need to create a new collection.\n      shopify_collection_create($collection, TRUE);\n    }\n    else {\n      shopify_collection_update($collection, TRUE);\n    }\n  }\n  shopify_sync_deleted_collections(array('limit' => 250));\n}\n\n/**\n * Sync deleted collections with the site.\n *\n * @param array $options\n *   Array of options to pass the API.\n *\n * @return int\n *   Returns the number of deleted collections.\n */\nfunction shopify_sync_deleted_collections(array $options = array()) {\n  $collections_count = shopify_api_get_collection_count($options);\n  $collections = array();\n  if (!isset($options['limit'])) {\n    $options['limit'] = 250;\n  }\n  for ($page = 1; $page <= ceil($collections_count / $options['limit']); $page++) {\n\n    // Setup default options for the products API call.\n    $options['page'] = $page;\n    $options['fields'] = 'id';\n\n    // Build a list of all products in the Shopify system.\n    $collections = array_merge($collections, shopify_api_get_collections($options));\n  }\n\n  // Format result set as an array of product and variant IDs.\n  $collection_ids = array();\n  array_walk_recursive($collections, function ($c) use (&$collection_ids) {\n    $collection_ids[] = $c;\n  });\n\n  $count = 0;\n\n  $query = new EntityFieldQuery();\n  $query->entityCondition('entity_type', 'taxonomy_term');\n  $query->propertyCondition('vid', shopify_collection_vocabulary()->vid);\n  if ($collection_ids) {\n    $query->fieldCondition('shopify_collection_id', 'value', $collection_ids, 'NOT IN');\n  }\n  $result = $query->execute();\n\n  if (isset($result['taxonomy_term'])) {\n    entity_delete_multiple('taxonomy_term', array_keys($result['taxonomy_term']));\n    $count = count($result['taxonomy_term']);\n  }\n\n  return $count;\n}\n\n/**\n * Sync deleted products/variants with the site.\n *\n * @param array $options\n *   Array of options to pass the API.\n *\n * @return int\n *   Returns the number of deleted products/variants.\n */\nfunction shopify_sync_deleted_products(array $options = array()) {\n  $product_count = shopify_api_get_product_count();\n  $products = $variants = array();\n  if (!isset($options['limit'])) {\n    $options['limit'] = 250;\n  }\n  $variant_ids = $product_ids = array();\n\n  for ($page = 1; $page <= ceil($product_count / $options['limit']); $page++) {\n\n    // Setup default options for the products API call.\n    $options['page'] = $page;\n    $options['fields'] = 'id,variants';\n\n    // Build a list of all products in the Shopify system.\n    $products = shopify_api_get_products($options);\n\n    // Merge all variants for these products.\n    foreach ($products as $p) {\n      $product_ids[] = $p['id'];\n      foreach ($p['variants'] as $v) {\n        $variant_ids[] = $v['id'];\n      }\n    }\n  }\n\n  // Free up memory.\n  unset($products);\n\n  // Safety check in case the product/variants counts failed.\n  if ($product_count !== count($product_ids)) {\n    return 0;\n  }\n\n  // Delete products in the DB that we did not pull back.\n  $deleted_products = db_delete('shopify_products')\n    ->condition('product_id', $product_ids, 'NOT IN')\n    ->condition('variant_id', 0)// Only delete products that are not a variant.\n    ->execute();\n  $deleted_variants = db_delete('shopify_products')\n    ->condition('variant_id', $variant_ids, 'NOT IN')\n    ->condition('variant_id', 0, '!=')// Only delete variants.\n    ->execute();\n\n  // Return total count of deleted items.\n  return $deleted_variants + $deleted_products;\n}\n\n/**\n * Menu access callback that puts 'administer shopify' permission first.\n */\nfunction shopify_user_access($string, $account = NULL) {\n  if (user_access('administer shopify', $account) || user_access($string, $account)) {\n    return TRUE;\n  }\n  return FALSE;\n}\n\n/**\n * Checks to ensure that this incoming webhook is indeed from Shopify.\n *\n * @link https://docs.shopify.com/api/webhooks/using-webhooks#verify-webhook Documentation @endlink\n */\nfunction shopify_webhook_access() {\n  if (!isset($_SERVER['HTTP_X_SHOPIFY_HMAC_SHA256'])) {\n    // Header is required.\n    return FALSE;\n  }\n  $data = file_get_contents('php://input');\n  // Compare their hmac to our own that we calculate.\n  return $_SERVER['HTTP_X_SHOPIFY_HMAC_SHA256'] === base64_encode(hash_hmac('sha256', $data, variable_get('shopify_api_secret'), TRUE));\n}\n\n/**\n * Implements hook_menu_alter().\n */\nfunction shopify_menu_alter(&$items) {\n  // Do not allow any user to delete products.\n  $items['admin/shopify/products/manage/%shopify_product/delete']['access callback'] = FALSE;\n\n  // Modify the products page display title and as a tab.\n  $items['admin/shopify/products']['title'] = 'Products';\n  $items['admin/shopify/products']['type'] = MENU_LOCAL_TASK;\n  $items['admin/shopify/products']['weight'] = -5;\n\n  // Products are added on Shopify, not in Drupal.\n  $items['admin/shopify/products/add']['page callback'] = 'drupal_goto';\n  $items['admin/shopify/products/add']['page arguments'] = array('https://' . shopify_store_info()->myshopify_domain . '/admin/products/new');\n  $items['admin/shopify/products/add']['options'] = array('attributes' => array('target' => '_blank'));\n}\n\n/**\n * Redirect a URL to a product page based on query params.\n */\nfunction shopify_redirect() {\n  $params = drupal_get_query_parameters();\n  if (isset($params['variant_id'])) {\n    // Check that we have this product.\n    if ($product = shopify_variant_load_single($params['variant_id'])) {\n      if ($parent = shopify_product_load_single($product->product_id, 0)) {\n        // Send the user to the product page.\n        $uri = entity_uri('shopify_product', $parent);\n        drupal_goto($uri['path'], array('query' => array('variant_id' => $params['variant_id'])));\n      }\n    }\n  }\n  elseif (isset($params['product_id'])) {\n    if ($product = shopify_product_load_single($params['product_id'], 0)) {\n      // Send the user to the product page.\n      $uri = entity_uri('shopify_product', $product);\n      drupal_goto($uri['path'], array('query' => array('variant_id' => $params['variant_id'])));\n    }\n  }\n  elseif (isset($params['collection_id'])) {\n    if ($collection = shopify_collection_load($params['collection_id'])) {\n      drupal_goto('products/collections/' . $collection->tid);\n    }\n  }\n  // Missing or bad data, can't find the right product/variant.\n  drupal_not_found();\n}\n\n/**\n * Redirect to product edit page.\n *\n * @param ShopifyProduct $product\n *   Shopify product entity.\n */\nfunction shopify_redirect_to_edit(ShopifyProduct $product) {\n  $path = \"admin/shopify/products/manage/{$product->id}/edit\";\n  drupal_goto($path);\n}\n\n/**\n * Redirect to product view page.\n *\n * @param ShopifyProduct $product\n *   Shopify product entity.\n */\nfunction shopify_redirect_to_view(ShopifyProduct $product) {\n  $uri = entity_uri('shopify_product', $product);\n  drupal_goto($uri['path']);\n}\n\n/**\n * Get the product label.\n *\n * @param ShopifyProduct $product\n *   Shopify product entity.\n *\n * @return string\n *   Shopify product title.\n */\nfunction shopify_product_title(ShopifyProduct $product) {\n  return $product->label();\n}\n\n/**\n * Get the path to the store from the view.\n */\nfunction shopify_store_path() {\n  $view = views_get_view('shopify_products');\n  return $view->display['page_products']->display_options['path'];\n}\n\n/**\n * Add to cart callback.\n *\n * Displays an \"Added to cart\" message to the user.\n * Certain data must be POSTed to this callback:\n *  - product_id: The parent product ID.\n *  - variant_id: The specific variant ID.\n */\nfunction shopify_added_to_cart() {\n  $data = drupal_get_query_array(file_get_contents('php://input'));\n  $parent = shopify_product_load_single($data['product_id'], 0);\n  $product = shopify_product_load_single($data['product_id'], $data['variant_id']);\n  $quantity = $data['quantity'];\n  $title = $product->label() == 'Default Title' ? '' : '- ' . $product->label();\n  drupal_set_message(t('@quantity x @parent @title (@price) added to !cart_link.', array(\n    '@parent' => $parent->label(),\n    '@title' => $title,\n    '@price' => shopify_money_format() . $product->wrapper()->price->value(),\n    '!cart_link' => l(t('your cart'), 'https://' . shopify_store_info()->myshopify_domain . '/cart'),\n    '@quantity' => $quantity,\n  )));\n  print '';\n}\n\n/**\n * Update a Shopify collection with new information.\n *\n * @param array $collection\n *   Shopify collection.\n * @param boolean $sync_products\n *   Whether or not to sync product information during update.\n */\nfunction shopify_collection_update($collection, $sync_products = FALSE) {\n  $term = shopify_collection_load($collection['id']);\n  if ($term) {\n    $term->name = $collection['title'];\n    $term->description = $collection['body_html'];\n    $date = strtotime($collection['published_at']);\n    $term->shopify_collection_published_at = array('und' => array(array('value' => $date ? $date : 0)));\n  }\n  drupal_alter('shopify_collection_save', $term, $collection);\n  if (taxonomy_term_save($term) && isset($collection['image']['src'])) {\n    // Save the image for this term.\n    shopify_collection_save_image($term, $collection['image']['src']);\n  }\n  // Sync product information for this collection.\n  shopify_collection_sync_products($collection);\n}\n\n/**\n * Create a new collection in the system and sync products.\n *\n * @param array $collection\n *   Shopify collection.\n * @param boolean $sync_products\n *   Whether or not to sync product information during creation.\n */\nfunction shopify_collection_create($collection, $sync_products = FALSE) {\n  $vocab = shopify_collection_vocabulary();\n  $date = strtotime($collection['published_at']);\n  $term = entity_create('taxonomy_term', array(\n    'vid' => $vocab->vid,\n    'name' => $collection['title'],\n    'description' => $collection['body_html'],\n    'shopify_collection_id' => array('und' => array(array('value' => $collection['id']))),\n    'shopify_collection_published_at' => array('und' => array(array('value' => $date ? $date : 0))),\n  ));\n  drupal_alter('shopify_collection_save', $term, $collection);\n  if (taxonomy_term_save($term) && isset($collection['image']['src'])) {\n    // Save the image for this term.\n    shopify_collection_save_image($term, $collection['image']['src']);\n  }\n  if ($sync_products) {\n    // Sync product information for this collection.\n    shopify_collection_sync_products($collection);\n  }\n}\n\n/**\n * Saves an image for a Shopify collection.\n *\n * @param stdClass $term\n *   Taxonomy term entity.\n * @param string $image_url\n *   Remote image URL for the collection image.\n */\nfunction shopify_collection_save_image(stdClass $term, $image_url) {\n  $directory = file_build_uri('shopify_images');\n  if (!file_prepare_directory($directory, FILE_CREATE_DIRECTORY)) {\n    // If our directory doesn't exist and can't be created, use the default.\n    $directory = NULL;\n  }\n  $file = system_retrieve_file($image_url, $directory, TRUE, FILE_EXISTS_REPLACE);\n  $term = entity_metadata_wrapper('taxonomy_term', $term);\n  $term->shopify_collection_image->set((array) $file);\n  $term->save();\n}\n\n/**\n * Sync product collect information for a given collection.\n *\n * @param array $collection\n *   Shopify collection.\n */\nfunction shopify_collection_sync_products($collection) {\n  $term = shopify_collection_load($collection['id']);\n  $collects = shopify_api_get_collects(array('collection_id' => $collection['id']));\n  foreach ($collects as $c) {\n    // Update this product information.\n    $product = shopify_product_load_single($c['product_id']);\n    if (!$product) {\n      continue;\n    }\n    $collections = $product->wrapper()->shopify_product_collections->value();\n    foreach ($collections as $collect) {\n      if ($collect && ($collect->tid == $term->tid)) {\n        // Product already in collection.\n        // Check if this collection is active.\n        if ($collect->shopify_collection_published_at['und'][0]['value'] == 0) {\n          // Remove this collection from the product.\n          $collections = array_filter($collections, function ($c) use ($collect) {\n            return $c->tid !== $collect->tid;\n          });\n          $product->wrapper()->shopify_product_collections->set($collections);\n          $product->wrapper()->save();\n        }\n        continue 2;\n      }\n    }\n    $product->wrapper()->shopify_product_collections[] = $term->tid;\n    $product->save();\n  }\n}\n\n/**\n * Delete a collection based on the collection ID.\n *\n * @param int $collection_id\n *   Shopify collection ID.\n */\nfunction shopify_collection_delete($collection_id) {\n  $term = shopify_collection_load($collection_id);\n  entity_delete_multiple('taxonomy_term', array($term->tid));\n  // Delete collection field values with these tid values.\n  db_delete('field_data_shopify_product_collections')\n    ->condition('shopify_product_collections_tid', $term->tid)\n    ->execute();\n}\n\n/**\n * Gets the Shopify collections vocabulary.\n */\nfunction shopify_collection_vocabulary() {\n  return taxonomy_vocabulary_machine_name_load('shopify_collections');\n}\n\n/**\n * Loads a collection.\n *\n * @param int $collection_id\n *   Shopify collection ID.\n *\n * @return stdClass\n *   Returns the taxonomy term collection.\n */\nfunction shopify_collection_load($collection_id) {\n  $query = new EntityFieldQuery();\n  $result = $query->entityCondition('entity_type', 'taxonomy_term')\n    ->fieldCondition('shopify_collection_id', 'value', $collection_id)\n    ->execute();\n  if ($result && isset($result['taxonomy_term'])) {\n    $terms = entity_load('taxonomy_term', array_keys($result['taxonomy_term']));\n    return reset($terms);\n  }\n  return NULL;\n}\n\n/**\n * Delete all Shopify Products.\n */\nfunction shopify_delete_all_products() {\n  $existing = db_query('SELECT s.id FROM {shopify_products} s');\n  $ids = $existing->fetchCol();\n  shopify_product_delete_multiple($ids);\n}\n\n/**\n * Delete all Shopify collections.\n */\nfunction shopify_delete_all_collections() {\n  $vocab = taxonomy_vocabulary_machine_name_load('shopify_collections');\n  $tids = db_select('taxonomy_term_data', 'ttd')\n    ->fields('ttd', array('tid'))\n    ->condition('vid', $vocab->vid)\n    ->execute()->fetchAllAssoc('tid');\n  if ($tids) {\n    entity_delete_multiple('taxonomy_term', array_keys($tids));\n\n    // Delete collection field values with these tid values.\n    db_delete('field_data_shopify_product_collections')\n      ->condition('shopify_product_collections_tid', array_keys($tids), 'IN')\n      ->execute();\n  }\n}\n\n/**\n * Delete Shopify Products and Variants by Shopify Product ID.\n */\nfunction shopify_delete_by_product_id($product_id) {\n  $products = db_query('SELECT s.id FROM {shopify_products} s WHERE product_id = :product_id', array(':product_id' => $product_id));\n  $ids = $products->fetchCol();\n  shopify_product_delete_multiple($ids);\n}\n\n/**\n * Update a Shopify Product with new values or create a new one.\n *\n * @param int $product_id\n *   Shopify Product ID.\n * @param int $variant_id\n *   Shopify Variant ID.\n * @param array $new_values\n *   New values to apply to the Shopify Product.\n *\n * @return \\ShopifyProduct\n *   Returns the newly created or modified Shopify Product.\n */\nfunction shopify_product_update($product_id, $variant_id = 0, array $new_values = array()) {\n  $shopify_product = shopify_product_load_single($product_id, $variant_id);\n  if (!$shopify_product) {\n    // Create a new product with those values.\n    $shopify_product = new ShopifyProduct($new_values);\n  }\n  else {\n    $shopify_product->__construct($new_values);\n  }\n  return $shopify_product;\n}\n\n/**\n * Load a single Shopify Product given a product and variant ID.\n *\n * @param int $product_id\n *   Shopify Product ID.\n * @param int $variant_id\n *   Shopify Variant ID.\n *\n * @return ShopifyProduct\n *   Returns the loaded Shopify Product entity.\n */\nfunction shopify_product_load_single($product_id, $variant_id = 0) {\n  $query = new EntityFieldQuery();\n  $query->entityCondition('entity_type', 'shopify_product')\n    ->propertyCondition('product_id', $product_id)\n    ->propertyCondition('variant_id', $variant_id)\n    ->addMetaData('account', user_load(1)); // Run the query as user 1.\n  $result = $query->execute();\n  if (isset($result['shopify_product'])) {\n    $ids = array_keys($result['shopify_product']);\n    $shopify_product = entity_load_single('shopify_product', reset($ids));\n  }\n  return isset($shopify_product) ? $shopify_product : NULL;\n}\n\n/**\n * Load a single Shopify Product variant given a variant ID.\n *\n * @param int $variant_id\n *   Shopify Variant ID.\n *\n * @return ShopifyProduct\n *   Returns the loaded Shopify Product variant entity.\n */\nfunction shopify_variant_load_single($variant_id) {\n  $query = new EntityFieldQuery();\n  $query->entityCondition('entity_type', 'shopify_product')\n    ->propertyCondition('variant_id', $variant_id)\n    ->addMetaData('account', user_load(1)); // Run the query as user 1.\n  $result = $query->execute();\n  if (isset($result['shopify_product'])) {\n    $ids = array_keys($result['shopify_product']);\n    $shopify_product = entity_load_single('shopify_product', reset($ids));\n  }\n  return isset($shopify_product) ? $shopify_product : NULL;\n}\n\n/**\n * Implements hook_entity_info().\n */\nfunction shopify_entity_info() {\n  $return = array(\n    'shopify_product' => array(\n      'label' => t('Shopify Product'),\n      'label callback' => 'shopify_product_label',\n      'uri callback' => 'shopify_product_uri',\n      'entity class' => 'ShopifyProduct',\n      'controller class' => 'ShopifyProductController',\n      'views controller class' => 'ShopifyProductViewsController',\n      'base table' => 'shopify_products',\n      'metatags' => TRUE,\n      'entity keys' => array(\n        'id' => 'id',\n        'label' => 'title'\n      ),\n      'fieldable' => TRUE,\n      'metadata controller class' => 'ShopifyProductMetadataController',\n      'extra fields controller class' => 'EntityDefaultExtraFieldsController',\n      'admin ui' => array(\n        'path' => 'admin/shopify/products',\n        'controller class' => 'ShopifyProductsUIController',\n        'menu wildcard' => '%shopify_product',\n\n      ),\n      'bundles' => array(\n        'shopify_product' => array(\n          'label' => 'Shopify Product Fields',\n          'metatags' => TRUE,\n          'admin' => array(\n            'path' => 'admin/shopify/products_structure',\n          ),\n        ),\n      ),\n      'view modes' => array(\n        'full' => array(\n          'label' => t('Full'),\n          'custom settings' => FALSE,\n        ),\n        'teaser' => array(\n          'label' => t('Teaser'),\n          'custom settings' => FALSE,\n        ),\n      ),\n      'load hook' => 'shopify_product_load',\n      'module' => 'shopify',\n      'access callback' => 'shopify_product_access',\n    ),\n  );\n\n  if (module_exists('search')) {\n    $return['shopify_product']['view modes'] += array(\n      'search_index' => array(\n        'label' => t('Search index'),\n        'custom settings' => FALSE,\n      ),\n      'search_result' => array(\n        'label' => t('Search result'),\n        'custom settings' => FALSE,\n      ),\n    );\n  }\n\n  return $return;\n}\n\n/**\n * Implements hook_entity_insert().\n */\nfunction shopify_entity_insert($entity, $type) {\n  if (module_exists('path') && $type == 'shopify_product') {\n    _shopify_product_insert_path($entity);\n  }\n}\n\n/**\n * Implements hook_entity_update().\n */\nfunction shopify_entity_update($entity, $type) {\n  if (module_exists('path') && $type == 'shopify_product') {\n    _shopify_product_update_path($entity);\n  }\n}\n\n/**\n * Implements hook_entity_delete().\n */\nfunction shopify_entity_delete($entity, $type) {\n  if (module_exists('path') && $type == 'shopify_product') {\n    _shopify_product_delete_path($entity);\n  }\n}\n\n/**\n * Page callback for the bundle admin.\n */\nfunction shopify_products_fields_admin() {\n  return t('Administer Shopify Product fields and display');\n}\n\n/**\n * Add to cart form for Shopify products.\n */\nfunction shopify_add_to_cart_form($form, &$form_state, ShopifyProduct $product = NULL) {\n  $form_id = 'shopify-add-to-cart-form-' . $product->handle;\n  $form['#id'] = $form_id;\n  $form['#action'] = '//' . shopify_store_info()->domain . '/cart/add';\n  $form['#attributes']['class'] = 'shopify-add-to-cart-form';\n\n  if ($product) {\n    $form['#product'] = $product;\n  }\n  elseif ($form['#product']) {\n    $product = $form['#product'];\n  }\n\n  if ((!isset($form_state['values']) || empty($form_state['values']['options'])) && $product->variants) {\n    // Set default variant to first one in the list.\n    $default_variant = reset($product->variants);\n\n    // Set default variant to whatever is passed as an arg in the URL.\n    if (isset($_GET['variant_id'])) {\n      foreach ($product->variants as $variant) {\n        if ($variant->variant_id == $_GET['variant_id']) {\n          $default_variant = $variant;\n          break;\n        }\n      }\n    }\n  }\n  elseif ($product->variants) {\n    // Set variant based on options passed.\n    $default_variant = shopify_add_to_cart_get_variant_from_options($product, $form_state['values']['options']);\n  }\n  else {\n    $default_variant = $product;\n  }\n\n  // Set data attributes for use in JS.\n  $form['#attributes']['data-product-id'] = $default_variant->product_id;\n  $form['#attributes']['data-variant-id'] = $default_variant->variant_id;\n\n  $form['product'] = array();\n\n  $form['product']['variant'] = array();\n\n  // Products with only 1 default variant will have a title of 'Default Title'.\n  // We do not need to show options for these products.\n  if ($product->variants && (!$default_variant || $default_variant->title !== 'Default Title')) {\n    $form['product']['variant']['options']['#tree'] = TRUE;\n    // Create option select lists based on product options.\n    foreach ($product->options as $key => $select_list) {\n      $form['product']['variant']['options'][] = array(\n        '#type' => 'select',\n        '#title' => check_plain(t($select_list['name'])),\n        '#options' => array(),\n        '#default_value' => $default_variant ? $default_variant->option_values[$key] : NULL,\n        '#attributes' => array('class' => array('shopify-variant-option')),\n        '#ajax' => array(\n          'wrapper' => $form_id,\n          'method' => 'replace',\n          'callback' => 'shopify_add_to_cart_ajax_callback',\n        ),\n      );\n    }\n\n    // Create option lists based on variant options that are available.\n    foreach ((array) $product->variants as $v) {\n      foreach ((array) $v->option_values as $key => $option_value) {\n        $form['product']['variant']['options'][$key]['#options'][$option_value] = $option_value;\n      }\n    }\n  }\n\n  if ($default_variant) {\n    $form['product']['variant']['price'] = array(\n      '#type' => 'container',\n      '#attributes' => array('class' => array('shopify-price')),\n      'value' => array(\n        '#markup' => shopify_money_format() . $default_variant->wrapper()->price->value(),\n      ),\n    );\n    // Required POST fields for add to cart form.\n    $form['id'] = array(\n      '#type' => 'hidden',\n      '#value' => $default_variant->variant_id,\n    );\n    $form['return_to'] = array(\n      '#type' => 'hidden',\n      '#value' => 'back',\n    );\n\n    $form['product']['variant']['quantity'] = array(\n      '#title' => t('Quantity'),\n      '#type' => 'textfield',\n      '#value' => 1,\n      '#size' => 1\n    );\n\n    if ($default_variant->inventory_policy == 'continue' || $default_variant->inventory_quantity > 0 || empty($default_variant->inventory_management)) {\n      $form['product']['variant']['actions'] = array(\n        '#type' => 'actions',\n        'submit' => array(\n          '#type' => 'submit',\n          '#attributes' => array('class' => array('shopify-add-to-cart-button')),\n          '#value' => t('Add to Cart'),\n        ),\n      );\n    }\n    else {\n      $form['product']['variant']['actions'] = array(\n        '#type' => 'button',\n        '#disabled' => TRUE,\n        '#attributes' => array(\n          'class' => array(\n            'shopify-add-to-cart-button',\n            'shopify-disabled-button',\n            'shopify-out-of-stock-button',\n            'disabled'\n          ),\n        ),\n        '#value' => t('Out of Stock'),\n      );\n    }\n\n  }\n  else {\n    $form['product']['variant']['actions'] = array(\n      '#type' => 'button',\n      '#disabled' => TRUE,\n      '#attributes' => array(\n        'class' => array(\n          'shopify-add-to-cart-button',\n          'shopify-disabled-button',\n          'shopify-unavailable-button',\n          'disabled'\n        ),\n      ),\n      '#value' => t('Not Available'),\n    );\n  }\n\n  return $form;\n}\n\n/**\n * Get the money format that has been set in Shopify.\n *\n * @return string\n *   Shopify money format.\n */\nfunction shopify_money_format() {\n  $format = shopify_store_info()->money_format;\n  return str_replace('{{amount}}', '', $format);\n}\n\n/**\n * Get Shopify store information.\n *\n * @link https://docs.shopify.com/api/shop Shop API Documentation @endlink\n *\n * @return object\n *   Object of store information.\n */\nfunction shopify_store_info() {\n  return (object) variable_get('shopify_store_info', array());\n}\n\n/**\n * Load a product by it's given variant_id.\n *\n * @param int $variant_id\n *   Product variant ID.\n * @return ShopifyProduct\n *   Returns a shopify product with the variant id.\n */\nfunction shopify_product_load_by_variant_id($variant_id) {\n  $query = new EntityFieldQuery();\n  $result = $query->entityCondition('entity_type', 'shopify_product')\n    ->propertyCondition('variant_id', $variant_id)\n    ->execute();\n  if (isset($result['shopify_product']) && $result['shopify_product']) {\n    $entities = entity_load('shopify_product', array_keys($result['shopify_product']));\n    return reset($entities);\n  }\n  return NULL;\n}\n\n/**\n * Returns a variant that matches the passed option values.\n *\n * If no variant is found that matches all the options, null is returned.\n *\n * @param \\ShopifyProduct $product\n *   Shopify product with variants.\n *\n * @param array $options\n *   Array of options to check against.\n *\n * @return \\ShopifyProduct\n *   Returns the variant that matches the passed options.\n */\nfunction shopify_add_to_cart_get_variant_from_options(ShopifyProduct $product, array $options = array()) {\n  $selected_variant = NULL;\n  foreach ((array) $product->variants as $v) {\n    foreach ((array) $v->option_values as $key => $value) {\n      if ($value !== $options[$key]) {\n        continue 2;\n      }\n    }\n    $selected_variant = $v;\n  }\n  return $selected_variant;\n}\n\n/**\n * Add to cart form AJAX callback.\n *\n * @see shopify_add_to_cart_form()\n */\nfunction shopify_add_to_cart_ajax_callback($form, $form_state) {\n  return $form;\n}\n\n/**\n * Shopify product access callback.\n *\n * @return bool\n *   Returns TRUE if the user has access to the product.\n */\nfunction shopify_product_access($op, ShopifyProduct $entity = NULL, $account = NULL, $entity_type = 'shopify_product') {\n  if (user_access('administer shopify', $account) || user_access('edit shopify products', $account)) {\n    // User has access to do all the things.\n    return TRUE;\n  }\n  switch ($op) {\n    case 'view':\n      // Check if this product is published.\n      return $entity->published_at && user_access('view shopify products', $account);\n      break;\n  }\n  return FALSE;\n}\n\n/**\n * Get the entity URI path.\n *\n * @param ShopifyProduct $entity\n *\n * @return array\n *   Returns the path URI.\n */\nfunction shopify_product_uri(ShopifyProduct $entity) {\n  return array(\n    'path' => 'product/' . $entity->id,\n  );\n}\n\n/**\n * Fetch a product object.\n *\n * @param int $id\n *   Integer specifying the product id.\n * @param boolean $reset\n *   A boolean indicating that the internal cache should be reset.\n *\n * @return ShopifyProduct\n *   A fully-loaded product or FALSE if it cannot be loaded.\n *\n * @see shopify_product_load_multiple()\n */\nfunction shopify_product_load($id, $reset = FALSE) {\n  $product = shopify_product_load_multiple(array($id), array(), $reset);\n  return $product ? reset($product) : FALSE;\n}\n\n/**\n * Load multiple product entities based on certain conditions.\n *\n * @param array $ids\n *   An array of entity IDs.\n * @param array $conditions\n *   An array of conditions to match against the {entity} table.\n * @param boolean $reset\n *   A boolean indicating that the internal cache should be reset.\n *\n * @return ShopifyProduct[]\n *   An array of product entity objects, indexed by id.\n */\nfunction shopify_product_load_multiple($ids = array(), $conditions = array(), $reset = FALSE) {\n  return entity_load('shopify_product', $ids, $conditions, $reset);\n}\n\n/**\n * Delete multiple product entities.\n *\n * @param array $ids\n *   An array of product entity IDs.\n */\nfunction shopify_product_delete_multiple(array $ids) {\n  foreach ($ids as $id) {\n    if (module_exists('search')) {\n      search_reindex($id, 'shopify_product');\n    }\n  }\n  entity_get_controller('shopify_product')->delete($ids);\n}\n\n/**\n * Implements hook_field_extra_fields().\n *\n * Adds the add to cart form to the display field settings for organization.\n *\n * @see shopify_add_to_cart_form()\n */\nfunction shopify_field_extra_fields() {\n  $info = array();\n  if (!isset($info['shopify_product']['shopify_product']['display']['full'])) {\n    $info['shopify_product']['shopify_product']['display']['add_to_cart'] = array(\n      'label' => t('Add to cart form'),\n      'description' => t('Shopify Add to Cart form'),\n      'weight' => 10,\n    );\n  }\n  return $info;\n}\n\n/**\n * Implements hook_entity_form().\n *\n * Creates the edit/update form for the entity.\n */\nfunction shopify_product_form($form, &$form_state, ShopifyProduct $product = NULL, $action = 'new') {\n  $form['#id'] = 'shopify-product-create-form';\n  $form_state['shopify_product'] = $product ?: new ShopifyProduct();\n\n  $form_state['#action'] = $action;\n\n  $form['title'] = array(\n    '#title' => t('Product or Variant Title'),\n    '#type' => 'textfield',\n    '#default_value' => $product->title,\n    '#required' => TRUE,\n  );\n\n  $form['actions'] = array('#type' => 'actions');\n  $form['actions']['submit'] = array(\n    '#type' => 'submit',\n    '#value' => t('Save product'),\n    '#weight' => 40,\n  );\n\n\n  if (module_exists('path')) {\n    $path = array();\n    if (!empty($form_state['shopify_product']->id)) {\n      $conditions = array('source' => 'product/' . $form_state['shopify_product']->id);\n      $langcode = entity_language('shopify_product', $form_state['shopify_product']);\n\n      if ($langcode == NULL) {\n        $conditions['language'] = LANGUAGE_NONE;\n      }\n      elseif ($langcode != LANGUAGE_NONE) {\n        $conditions['language'] = $langcode;\n      }\n\n      $path = path_load($conditions);\n      if ($path === FALSE) {\n        $path = array();\n      }\n    }\n    $path += array(\n      'pid' => NULL,\n      'source' => isset($form_state['shopify_product']->id) ? 'product/' . $form_state['shopify_product']->id : NULL,\n      'alias' => '',\n      'language' => isset($langcode) ? $langcode : LANGUAGE_NONE,\n    );\n\n    $form['path'] = array(\n      '#type' => 'fieldset',\n      '#title' => t('URL path settings'),\n      '#collapsible' => TRUE,\n      '#collapsed' => empty($path['alias']),\n      '#group' => 'additional_settings',\n      '#attributes' => array(\n        'class' => array('path-form'),\n      ),\n      '#attached' => array(\n        'js' => array(drupal_get_path('module', 'path') . '/path.js'),\n      ),\n      '#access' => user_access('create url aliases') || user_access('administer url aliases'),\n      '#weight' => 30,\n      '#tree' => TRUE,\n      '#element_validate' => array('path_form_element_validate'),\n    );\n    $form['path']['alias'] = array(\n      '#type' => 'textfield',\n      '#title' => t('URL alias'),\n      '#default_value' => $path['alias'],\n      '#maxlength' => 255,\n      '#description' => t('Optionally specify an alternative URL by which this content can be accessed. For example, type \"about\" when writing an about page. Use a relative path and don\\'t add a trailing slash or the URL alias won\\'t work.'),\n    );\n    $form['path']['pid'] = array('#type' => 'value', '#value' => $path['pid']);\n    $form['path']['source'] = array(\n      '#type' => 'value',\n      '#value' => $path['source']\n    );\n    $form['path']['language'] = array(\n      '#type' => 'value',\n      '#value' => $path['language']\n    );\n  }\n\n  // No idea why this is necessary...\n  $form['#submit'][] = 'shopify_product_form_submit';\n\n  field_attach_form('shopify_product', $product, $form, $form_state);\n  return $form;\n}\n\n/**\n * Form API submit callback for the entity type form.\n */\nfunction shopify_product_form_submit(&$form, &$form_state) {\n  $product = entity_ui_form_submit_build_entity($form, $form_state);\n  $product->save();\n  $form_state['redirect'] = 'admin/shopify/products';\n}\n\n/**\n * Implements hook_entity_info_alter().\n *\n * Redirect any links to shopify_tag taxonomy terms to a View so the tags\n * actually do something.\n */\nfunction shopify_entity_info_alter(&$entity_info) {\n  $entity_info['taxonomy_term']['bundles']['shopify_tags']['uri callback'] = 'shopify_taxonomy_tag_term_uri';\n  $entity_info['taxonomy_term']['bundles']['shopify_collections']['uri callback'] = 'shopify_taxonomy_collection_term_uri';\n}\n\n/**\n * Entity uri callback for shopify_tag taxonomy terms.\n */\nfunction shopify_taxonomy_tag_term_uri($term) {\n  return array(\n    'path' => 'products/tags/' . $term->tid,\n  );\n}\n\n/**\n * Entity uri callback for shopify_tag taxonomy terms.\n */\nfunction shopify_taxonomy_collection_term_uri($term) {\n  return array(\n    'path' => 'products/collections/' . $term->tid,\n  );\n}\n\n/**\n * Implements hook_theme().\n */\nfunction shopify_theme($existing, $type, $theme, $path) {\n  return array(\n    'entity_property__shopify_product__body_html' => array(\n      'base hook' => 'entity_property',\n    ),\n    'entity_property__shopify_product__price' => array(\n      'base hook' => 'entity_property',\n    ),\n  );\n}\n\n/**\n * @param $variables\n * @return string\n */\nfunction theme_entity_property__shopify_product__body_html(&$variables) {\n  // Get the raw HTML and run it through check_markup, rather than check_plain\n  // which is used in entity_property_default_render_value_by_type\n  $variables['content'] = check_markup($variables['elements']['#entity_wrapped']->{$variables['property_name']}->value(), 'full_html');\n  $output = '';\n\n  // Render the label, if it's not hidden.\n  if (!$variables['label_hidden']) {\n    $output .= '<div' . $variables['title_attributes'] . '>' . $variables['label'] . ':&nbsp;</div>';\n  }\n\n  // Render the content.\n  $content_suffix = '';\n  if (!$variables['label_hidden'] || $variables['content_attributes']) {\n    $output .= '<div' . $variables['content_attributes'] . '>';\n    $content_suffix = '</div>';\n  }\n  $output .= $variables['content'] . $content_suffix;\n\n  // Render the top-level DIV.\n  return '<div' . $variables['attributes'] . '>' . $output . '</div>';\n}\n\n/**\n * @param $variables\n * @return string\n */\nfunction theme_entity_property__shopify_product__price(&$variables) {\n  if ($variables['content']) {\n    $variables['content'] = shopify_money_format() . $variables['content'];\n  }\n  $output = '';\n\n  // Render the label, if it's not hidden.\n  if (!$variables['label_hidden']) {\n    $output .= '<div' . $variables['title_attributes'] . '>' . $variables['label'] . ':&nbsp;</div>';\n  }\n\n  // Render the content.\n  $content_suffix = '';\n  if (!$variables['label_hidden'] || $variables['content_attributes']) {\n    $output .= '<div' . $variables['content_attributes'] . '>';\n    $content_suffix = '</div>';\n  }\n  $output .= $variables['content'] . $content_suffix;\n\n  // Render the top-level DIV.\n  return '<div' . $variables['attributes'] . '>' . $output . '</div>';\n}\n\n/**\n * Implements hook_image_default_styles().\n */\nfunction shopify_image_default_styles() {\n  $styles = array();\n\n  $styles['shopify_product_thumbnail'] = array(\n    'label' => 'Shopify Product Thumbnail',\n    'effects' => array(\n      array(\n        'name' => 'image_scale',\n        'data' => array(\n          'width' => 150,\n          'height' => 0,\n          'upscale' => 0,\n        ),\n        'weight' => 0,\n      ),\n    ),\n  );\n\n  return $styles;\n}\n\n/**\n * Implements hook_block_info().\n */\nfunction shopify_block_info() {\n  $blocks['cart'] = array(\n    'info' => t('Shopify Cart'),\n    'cache' => DRUPAL_NO_CACHE,\n  );\n  return $blocks;\n}\n\n/**\n * Implements hook_block_view().\n */\nfunction shopify_block_view($delta = '') {\n  $block = array();\n  switch ($delta) {\n    case 'cart':\n      $domain = shopify_store_info()->myshopify_domain;\n      $cart = t('Cart');\n      $block['subject'] = $cart;\n      $block['content'] = array(\n        '#markup' => <<<_HTML\n      <a href=\"https://$domain/cart\"><i class=\"fa fa-shopping-cart\"></i> <span id=\"shopify-cart-text\">$cart<span> (<span id='shopify-cart-total'></span>)</a>\n      <script type='text/javascript'>\n        jQuery.ajax({\n            type: 'GET',\n            url: 'https://$domain/cart.json',\n            dataType: 'jsonp',\n            success: function(data) {\n                var total = 0;\n                for(i=0;i<data.items.length;i++){\n                  total += data.items[i].quantity;\n                }\n                jQuery('#shopify-cart-total').text(total);\n            }\n        });\n      </script>\n_HTML\n      );\n      break;\n  }\n  return $block;\n}\n\n/**\n * Resets the product sync timestamp.\n */\nfunction shopify_products_reset_sync_datestamp() {\n  $datetime = new DateTime('1/1/1970');\n  $last_updated = $datetime->format('Y-m-d H:i');\n  variable_set('shopify_last_product_sync', $last_updated);\n}\n\n/**\n * Resets the collections sync timestamp.\n */\nfunction shopify_collections_reset_sync_datestamp() {\n  $datetime = new DateTime('1/1/1970');\n  $last_updated = $datetime->format('Y-m-d H:i');\n  variable_set('shopify_last_collection_sync', $last_updated);\n}\n\n/**\n * Modifies the product form to disable fields and add help text.\n */\nfunction shopify_form_shopify_product_form_alter(&$form, &$form_state, $hook) {\n  $product = menu_get_object('shopify_product', 4);\n  $edit_url = shopify_api_get_product_path($product->product_id, $product->variant_id);\n\n  $form['help'] = array(\n    '#markup' => t('Product data synced with Shopify is not editable. Edit those fields on Shopify instead. <a href=\"!edit_url\" target=\"_blank\">!edit_url</a>', array('!edit_url' => $edit_url)),\n    '#weight' => -99,\n  );\n\n  $disable = array(\n    'shopify_product_images',\n    'shopify_product_tags',\n    'shopify_product_collections',\n    'title',\n  );\n\n  foreach ($disable as $key) {\n    $form[$key]['#disabled'] = TRUE;\n  }\n}\n\n/**\n * Implements hook_form_FORM_ID_alter().\n *\n * Disable certain taxonomy fields for Shopify terms.\n */\nfunction shopify_form_taxonomy_form_term_alter(&$form, &$form_state) {\n  switch ($form['#bundle']) {\n    case 'shopify_collections':\n      $disabled = array(\n        'shopify_collection_id',\n        'shopify_collection_image',\n        'shopify_collection_published_at',\n        'name',\n        'description',\n        'relations',\n      );\n\n      $wrapper = entity_metadata_wrapper('taxonomy_term', $form['#entity']);\n      $url = shopify_api_get_shop_admin_path() . '/collections/' . $wrapper->shopify_collection_id->value();\n\n      $form['help'] = array(\n        '#markup' => t('Term data synced with Shopify is not editable. <a href=\"@shopify_collections\" target=\"_blank\">Edit that information on Shopify instead.</a>', array('@shopify_collections' => url($url))),\n        '#weight' => -99,\n      );\n\n      break;\n    case'shopify_tags':\n      $disabled = array(\n        'name',\n        'relations',\n      );\n\n      $url = shopify_api_get_shop_admin_path() . '/products/';\n      $form['help'] = array(\n        '#markup' => t('Term data synced with Shopify products is not editable. <a href=\"@shopify_products\" target=\"_blank\">Edit that information on the Shopify products instead.</a>', array('@shopify_products' => url($url))),\n        '#weight' => -99,\n      );\n\n      break;\n  }\n  if (isset($disabled) && $disabled) {\n    foreach ($disabled as $key) {\n      $form[$key]['#disabled'] = TRUE;\n    }\n  }\n}\n\n/**\n * Implements hook_ctools_plugin_api().\n */\nfunction shopify_ctools_plugin_api($owner, $api) {\n  if ($owner == 'metatag' && $api == 'metatag') {\n    return array('version' => 1);\n  }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- trunk/sites/all/modules/contrib/shopify/shopify.module	(revision 458ceaf36c84dc7c8a105ea8cf8e0c77985a530a)
+++ trunk/sites/all/modules/contrib/shopify/shopify.module	(revision )
@@ -1309,7 +1309,7 @@
   switch ($op) {
     case 'view':
       // Check if this product is published.
-      return $entity->published_at && user_access('view shopify products', $account);
+      return !empty($entity->published_at) && user_access('view shopify products', $account);
       break;
   }
   return FALSE;
